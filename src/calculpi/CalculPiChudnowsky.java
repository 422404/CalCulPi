/*
 * CalculPiChidnowsky.java                       15/10/2017
 * Elyan Poujol
 * Pas de droits
 */

package calculpi;

/**
 * Calcule l'approximation de Pi avec la méthode des frères Chudnowsky
 * @author Elyan Poujol
 */
public class CalculPiChudnowsky {
    /** instance de l'interface graphique */
    private GUI gui;
    
    /**
     * Constructeur sans arguments de CalculPiChudnowsky
     */
    public CalculPiChudnowsky() {
        super();
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
        }
        //</editor-fold>
        this.gui = new GUI();
        this.gui.setVisible(true);
    }
    
    /**
     * Calcule Pi avec la methode des freres Chudnowsky
     * @param k nombre d'iterations de l'algorithme
     * @return valeur de pi
     */
    private double calculer(int k) {
        return 1 / calculRecursif(k);
    }

    /**
     * Calcule la somme des iterations
     * @param k nombre d'iterations restantes
     * @return
     */
    private double calculRecursif(int k) {
        if (k == 0) {
            return calcul(k);
        }

        return calcul(k) + calculRecursif(k - 1);
    }

    /**
     * Calcule une iteration de l'algorithme
     * @param k
     * @return 
     */
    private double calcul(int k) {
        double numerateur = Math.pow(-1.0, k) * factorielle(6.0 * k) * (13591409.0 + 545140134.0 * k);
        double denominateur = factorielle(3.0 * k) * Math.pow(factorielle(k), 3.0) * Math.pow(640320.0, 3.0 * k + 3.0 / 2.0);

        return 12.0 * (numerateur / denominateur);
    }

    /**
     * Factorielle (ne factorise pas !)
     * @param n nombre a factorieller
     * @return le nombre factorationne
     */
    private double factorielle(double n) {
        if (n == 0) {
            return 1.0;
        } else {
            return n * factorielle(n - 1);
        }
    }
    
    private void btnCalculerActionPerformed(java.awt.event.ActionEvent evt) {                                            
        this.gui.txtResultat.setText("Pi : " + calculer(1));
    }
    
    private class GUI extends javax.swing.JFrame {
        private javax.swing.JButton btnCalculer;
        private javax.swing.JTextField txtResultat;
        
        /**
         * Creates new form GUI
         */
        public GUI() {
            initComponents();
        }

        /**
         * This method is called from within the constructor to initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is always
         * regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
        private void initComponents() {

            txtResultat = new javax.swing.JTextField();
            btnCalculer = new javax.swing.JButton();

            setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
            setTitle("Calcul Pi : Méthode des frères Chudnowsky");
            setResizable(false);

            txtResultat.setEditable(false);
            txtResultat.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

            btnCalculer.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            btnCalculer.setText("Calculer !");
            btnCalculer.addActionListener(new java.awt.event.ActionListener() {
                @Override
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnCalculerActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(txtResultat)
                    .addContainerGap())
                .addGroup(layout.createSequentialGroup()
                    .addGap(180, 180, 180)
                    .addComponent(btnCalculer, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(181, Short.MAX_VALUE))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(txtResultat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(66, 66, 66)
                    .addComponent(btnCalculer)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            pack();
        }// </editor-fold>                        
    }
}
