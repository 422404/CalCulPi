/*
 * CalculPiDisqueGUI                             15/10/2017
 * Elyan Poujol
 * Pas de droits
 */

package calculpi;

import java.awt.Color;
import java.awt.Graphics;

/**
 * Calcule l'approximation avec un quart de disque, bla bla bla... go google ok ?!
 * @author Elyan Poujol
 */
public class CalculPiDisqueGUI {
    /** instance de la fenetre */
    private GUI gui = null;
    
    /** instance de Graphics de cadreDessin */
    private Graphics g = null;
    
    /**
     * Constructeur sans arguments de CalculPiDisque
     */
    public CalculPiDisqueGUI() {
        super();
        dessinerInterface();
    }
    
    private double calculer() {
        int nbPoints = this.gui.nbPoints;
        int k = 0;
        
        // on redessine le dessin de base
        dessinerDessinBase();
        
        for (int i = 1; i <= nbPoints; i++) {
            double x = Math.random();
            double y = Math.random();
            
            if (x*x + y*y <= 1.0) {
                this.g.setColor(Color.RED);
                k++;
            } else {
                this.g.setColor(Color.BLUE);
            }
            
            int rectX = (int)(x * 300);
            int rectY = (int)(y * 300);
            
            // on fait en sorte que tous les points restent dans la zone de dessin
            if (rectX > 295) {
                rectX = 295;
            }
            if (rectY > 295) {
                rectY = 295;
            }
            
            this.g.fillRect((int)(x * 300), (int)(y * 300),
                            this.gui.taillePoint, this.gui.taillePoint);
        }
        
        return (k * 4) / (double)nbPoints;
    }
    
    private void dessinerDessinBase() {
        this.g.setColor(Color.WHITE);
        this.g.fillRect(0, 0, 300, 300);
        this.g.setColor(Color.BLACK);
        this.g.drawArc(-300, -300, 600, 600, 0, -90);
    }
    
    private void dessinerInterface() {
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
        }
        //</editor-fold>
        this.gui = new GUI();
        this.g = this.gui.cadreDessin.getGraphics();
        
        this.gui.setVisible(true);
    }
    
    private void btnCalculerActionPerformed(java.awt.event.ActionEvent evt) {
        String ancienTexte = this.gui.txtResultats.getText();
        this.gui.txtResultats.setText(ancienTexte + calculer() + "\n");
    }
    
    private class CadreDessin extends javax.swing.JPanel {
        @Override
        public void paintComponent(Graphics g) {
            g.setColor(Color.WHITE);
            g.fillRect(0, 0, 300, 300);
            g.setColor(Color.BLACK);
            g.drawArc(-300, -300, 600, 600, 0, -90);
        }
    }
    
    private class GUI extends javax.swing.JFrame {
        private CadreDessin cadreDessin;
        private javax.swing.JButton btnCalculer;
        private javax.swing.JScrollPane txtResultatScrollPane;
        private javax.swing.JTextArea txtResultats;
        private javax.swing.JLabel lblTaillePoint;
        private javax.swing.JSlider sliderTaillePoint;
        private javax.swing.JTextField txtTaillePoint;
        private javax.swing.JSlider sliderNbPoints;
        private javax.swing.JTextField txtNbPoints;
        private javax.swing.JLabel lblNbPoints;
        private int taillePoint = 1;
        private int nbPoints = 100;
        
        /**
         * Creates new form GUI
         */
        public GUI() {
            initComponents();
        }

        /**
         * This method is called from within the constructor to initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is always
         * regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
        private void initComponents() {
            cadreDessin = new CadreDessin();
            txtResultatScrollPane = new javax.swing.JScrollPane();
            txtResultats = new javax.swing.JTextArea();
            btnCalculer = new javax.swing.JButton();
            sliderTaillePoint = new javax.swing.JSlider();
            txtTaillePoint = new javax.swing.JTextField();
            lblTaillePoint = new javax.swing.JLabel();
            sliderNbPoints = new javax.swing.JSlider();
            lblNbPoints = new javax.swing.JLabel();
            txtNbPoints = new javax.swing.JTextField();

            setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
            setTitle("Cacul Pi : MÃ©thode du quart de disque");
            setResizable(false);

            cadreDessin.setPreferredSize(new java.awt.Dimension(300, 300));

            javax.swing.GroupLayout cadreDessinLayout = new javax.swing.GroupLayout(cadreDessin);
            cadreDessin.setLayout(cadreDessinLayout);
            cadreDessinLayout.setHorizontalGroup(
                cadreDessinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 298, Short.MAX_VALUE)
            );
            cadreDessinLayout.setVerticalGroup(
                cadreDessinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 0, Short.MAX_VALUE)
            );

            txtResultats.setEditable(false);
            txtResultats.setColumns(20);
            txtResultats.setRows(5);
            txtResultatScrollPane.setViewportView(txtResultats);

            btnCalculer.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            btnCalculer.setText("Calculer !");
            btnCalculer.addActionListener(new java.awt.event.ActionListener() {
                @Override
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnCalculerActionPerformed(evt);
                }
            });

            sliderTaillePoint.setMajorTickSpacing(1);
            sliderTaillePoint.setMaximum(5);
            sliderTaillePoint.setMinimum(1);
            sliderTaillePoint.setPaintTicks(true);
            sliderTaillePoint.setSnapToTicks(true);
            sliderTaillePoint.setValue(1);
            sliderTaillePoint.addChangeListener(new javax.swing.event.ChangeListener() {
                @Override
                public void stateChanged(javax.swing.event.ChangeEvent evt) {
                    sliderTaillePointStateChanged(evt);
                }
            });

            txtTaillePoint.setEditable(false);
            txtTaillePoint.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            txtTaillePoint.setText("1 px");

            lblTaillePoint.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            lblTaillePoint.setText("Taille point :");

            sliderNbPoints.setMajorTickSpacing(1000);
            sliderNbPoints.setMaximum(20000);
            sliderNbPoints.setMinimum(100);
            sliderNbPoints.setPaintTicks(true);
            sliderNbPoints.setToolTipText("");
            sliderNbPoints.addChangeListener(new javax.swing.event.ChangeListener() {
                @Override
                public void stateChanged(javax.swing.event.ChangeEvent evt) {
                    sliderNbPointsStateChanged(evt);
                }
            });

            lblNbPoints.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            lblNbPoints.setText("Nombre points :");

            txtNbPoints.setEditable(false);
            txtNbPoints.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            txtNbPoints.setText("100 pts");

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(208, 208, 208)
                    .addComponent(btnCalculer, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(cadreDessin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(sliderNbPoints, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(sliderTaillePoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(51, 51, 51)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtResultatScrollPane)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblNbPoints)
                                .addComponent(lblTaillePoint))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtNbPoints, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                                .addComponent(txtTaillePoint))
                            .addGap(0, 76, Short.MAX_VALUE)))
                    .addContainerGap())
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(cadreDessin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtResultatScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(sliderTaillePoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(5, 5, 5)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblTaillePoint)
                                .addComponent(txtTaillePoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(sliderNbPoints, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNbPoints)
                            .addComponent(txtNbPoints, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(18, 18, 18)
                    .addComponent(btnCalculer, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap())
            );

            pack();
        }// </editor-fold>            
        
        private void sliderTaillePointStateChanged(javax.swing.event.ChangeEvent evt) {
            if (!sliderTaillePoint.getValueIsAdjusting()) {
                this.taillePoint = sliderTaillePoint.getValue();
                this.txtTaillePoint.setText(this.taillePoint + " px");
            }
        }
        
        private void sliderNbPointsStateChanged(javax.swing.event.ChangeEvent evt) {                                            
            if (!sliderNbPoints.getValueIsAdjusting()) {
                this.nbPoints = sliderNbPoints.getValue();
                this.txtNbPoints.setText(this.nbPoints + " pts");
            }
        }     
    }
}
